//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace ProtocolParser {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("NewDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class NewDataSet : global::System.Data.DataSet {
        
        private messageDataTable tablemessage;
        
        private playerLoginDataTable tableplayerLogin;
        
        private gameMasterLoginDataTable tablegameMasterLogin;
        
        private playerDataTable tableplayer;
        
        private responseDataTable tableresponse;
        
        private errorDataTable tableerror;
        
        private gameIdDataTable tablegameId;
        
        private nextPlayerDataTable tablenextPlayer;
        
        private gameOverDataTable tablegameOver;
        
        private gameStateDataTable tablegameState;
        
        private ticDataTable tabletic;
        
        private tacDataTable tabletac;
        
        private moveDataTable tablemove;
        
        private global::System.Data.DataRelation relationmessage_playerLogin;
        
        private global::System.Data.DataRelation relationmessage_gameMasterLogin;
        
        private global::System.Data.DataRelation relationgameOver_player;
        
        private global::System.Data.DataRelation relationmessage_player;
        
        private global::System.Data.DataRelation relationmessage_response;
        
        private global::System.Data.DataRelation relationmessage_error;
        
        private global::System.Data.DataRelation relationmessage_gameId;
        
        private global::System.Data.DataRelation relationmessage_nextPlayer;
        
        private global::System.Data.DataRelation relationmessage_gameOver;
        
        private global::System.Data.DataRelation relationmessage_gameState;
        
        private global::System.Data.DataRelation relationgameState_tic;
        
        private global::System.Data.DataRelation relationmove_tic;
        
        private global::System.Data.DataRelation relationgameState_tac;
        
        private global::System.Data.DataRelation relationmove_tac;
        
        private global::System.Data.DataRelation relationmessage_move;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public NewDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected NewDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["message"] != null)) {
                    base.Tables.Add(new messageDataTable(ds.Tables["message"]));
                }
                if ((ds.Tables["playerLogin"] != null)) {
                    base.Tables.Add(new playerLoginDataTable(ds.Tables["playerLogin"]));
                }
                if ((ds.Tables["gameMasterLogin"] != null)) {
                    base.Tables.Add(new gameMasterLoginDataTable(ds.Tables["gameMasterLogin"]));
                }
                if ((ds.Tables["player"] != null)) {
                    base.Tables.Add(new playerDataTable(ds.Tables["player"]));
                }
                if ((ds.Tables["response"] != null)) {
                    base.Tables.Add(new responseDataTable(ds.Tables["response"]));
                }
                if ((ds.Tables["error"] != null)) {
                    base.Tables.Add(new errorDataTable(ds.Tables["error"]));
                }
                if ((ds.Tables["gameId"] != null)) {
                    base.Tables.Add(new gameIdDataTable(ds.Tables["gameId"]));
                }
                if ((ds.Tables["nextPlayer"] != null)) {
                    base.Tables.Add(new nextPlayerDataTable(ds.Tables["nextPlayer"]));
                }
                if ((ds.Tables["gameOver"] != null)) {
                    base.Tables.Add(new gameOverDataTable(ds.Tables["gameOver"]));
                }
                if ((ds.Tables["gameState"] != null)) {
                    base.Tables.Add(new gameStateDataTable(ds.Tables["gameState"]));
                }
                if ((ds.Tables["tic"] != null)) {
                    base.Tables.Add(new ticDataTable(ds.Tables["tic"]));
                }
                if ((ds.Tables["tac"] != null)) {
                    base.Tables.Add(new tacDataTable(ds.Tables["tac"]));
                }
                if ((ds.Tables["move"] != null)) {
                    base.Tables.Add(new moveDataTable(ds.Tables["move"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public messageDataTable message {
            get {
                return this.tablemessage;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public playerLoginDataTable playerLogin {
            get {
                return this.tableplayerLogin;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public gameMasterLoginDataTable gameMasterLogin {
            get {
                return this.tablegameMasterLogin;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public playerDataTable player {
            get {
                return this.tableplayer;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public responseDataTable response {
            get {
                return this.tableresponse;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public errorDataTable error {
            get {
                return this.tableerror;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public gameIdDataTable gameId {
            get {
                return this.tablegameId;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public nextPlayerDataTable nextPlayer {
            get {
                return this.tablenextPlayer;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public gameOverDataTable gameOver {
            get {
                return this.tablegameOver;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public gameStateDataTable gameState {
            get {
                return this.tablegameState;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ticDataTable tic {
            get {
                return this.tabletic;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tacDataTable tac {
            get {
                return this.tabletac;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public moveDataTable move {
            get {
                return this.tablemove;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            NewDataSet cln = ((NewDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["message"] != null)) {
                    base.Tables.Add(new messageDataTable(ds.Tables["message"]));
                }
                if ((ds.Tables["playerLogin"] != null)) {
                    base.Tables.Add(new playerLoginDataTable(ds.Tables["playerLogin"]));
                }
                if ((ds.Tables["gameMasterLogin"] != null)) {
                    base.Tables.Add(new gameMasterLoginDataTable(ds.Tables["gameMasterLogin"]));
                }
                if ((ds.Tables["player"] != null)) {
                    base.Tables.Add(new playerDataTable(ds.Tables["player"]));
                }
                if ((ds.Tables["response"] != null)) {
                    base.Tables.Add(new responseDataTable(ds.Tables["response"]));
                }
                if ((ds.Tables["error"] != null)) {
                    base.Tables.Add(new errorDataTable(ds.Tables["error"]));
                }
                if ((ds.Tables["gameId"] != null)) {
                    base.Tables.Add(new gameIdDataTable(ds.Tables["gameId"]));
                }
                if ((ds.Tables["nextPlayer"] != null)) {
                    base.Tables.Add(new nextPlayerDataTable(ds.Tables["nextPlayer"]));
                }
                if ((ds.Tables["gameOver"] != null)) {
                    base.Tables.Add(new gameOverDataTable(ds.Tables["gameOver"]));
                }
                if ((ds.Tables["gameState"] != null)) {
                    base.Tables.Add(new gameStateDataTable(ds.Tables["gameState"]));
                }
                if ((ds.Tables["tic"] != null)) {
                    base.Tables.Add(new ticDataTable(ds.Tables["tic"]));
                }
                if ((ds.Tables["tac"] != null)) {
                    base.Tables.Add(new tacDataTable(ds.Tables["tac"]));
                }
                if ((ds.Tables["move"] != null)) {
                    base.Tables.Add(new moveDataTable(ds.Tables["move"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablemessage = ((messageDataTable)(base.Tables["message"]));
            if ((initTable == true)) {
                if ((this.tablemessage != null)) {
                    this.tablemessage.InitVars();
                }
            }
            this.tableplayerLogin = ((playerLoginDataTable)(base.Tables["playerLogin"]));
            if ((initTable == true)) {
                if ((this.tableplayerLogin != null)) {
                    this.tableplayerLogin.InitVars();
                }
            }
            this.tablegameMasterLogin = ((gameMasterLoginDataTable)(base.Tables["gameMasterLogin"]));
            if ((initTable == true)) {
                if ((this.tablegameMasterLogin != null)) {
                    this.tablegameMasterLogin.InitVars();
                }
            }
            this.tableplayer = ((playerDataTable)(base.Tables["player"]));
            if ((initTable == true)) {
                if ((this.tableplayer != null)) {
                    this.tableplayer.InitVars();
                }
            }
            this.tableresponse = ((responseDataTable)(base.Tables["response"]));
            if ((initTable == true)) {
                if ((this.tableresponse != null)) {
                    this.tableresponse.InitVars();
                }
            }
            this.tableerror = ((errorDataTable)(base.Tables["error"]));
            if ((initTable == true)) {
                if ((this.tableerror != null)) {
                    this.tableerror.InitVars();
                }
            }
            this.tablegameId = ((gameIdDataTable)(base.Tables["gameId"]));
            if ((initTable == true)) {
                if ((this.tablegameId != null)) {
                    this.tablegameId.InitVars();
                }
            }
            this.tablenextPlayer = ((nextPlayerDataTable)(base.Tables["nextPlayer"]));
            if ((initTable == true)) {
                if ((this.tablenextPlayer != null)) {
                    this.tablenextPlayer.InitVars();
                }
            }
            this.tablegameOver = ((gameOverDataTable)(base.Tables["gameOver"]));
            if ((initTable == true)) {
                if ((this.tablegameOver != null)) {
                    this.tablegameOver.InitVars();
                }
            }
            this.tablegameState = ((gameStateDataTable)(base.Tables["gameState"]));
            if ((initTable == true)) {
                if ((this.tablegameState != null)) {
                    this.tablegameState.InitVars();
                }
            }
            this.tabletic = ((ticDataTable)(base.Tables["tic"]));
            if ((initTable == true)) {
                if ((this.tabletic != null)) {
                    this.tabletic.InitVars();
                }
            }
            this.tabletac = ((tacDataTable)(base.Tables["tac"]));
            if ((initTable == true)) {
                if ((this.tabletac != null)) {
                    this.tabletac.InitVars();
                }
            }
            this.tablemove = ((moveDataTable)(base.Tables["move"]));
            if ((initTable == true)) {
                if ((this.tablemove != null)) {
                    this.tablemove.InitVars();
                }
            }
            this.relationmessage_playerLogin = this.Relations["message_playerLogin"];
            this.relationmessage_gameMasterLogin = this.Relations["message_gameMasterLogin"];
            this.relationgameOver_player = this.Relations["gameOver_player"];
            this.relationmessage_player = this.Relations["message_player"];
            this.relationmessage_response = this.Relations["message_response"];
            this.relationmessage_error = this.Relations["message_error"];
            this.relationmessage_gameId = this.Relations["message_gameId"];
            this.relationmessage_nextPlayer = this.Relations["message_nextPlayer"];
            this.relationmessage_gameOver = this.Relations["message_gameOver"];
            this.relationmessage_gameState = this.Relations["message_gameState"];
            this.relationgameState_tic = this.Relations["gameState_tic"];
            this.relationmove_tic = this.Relations["move_tic"];
            this.relationgameState_tac = this.Relations["gameState_tac"];
            this.relationmove_tac = this.Relations["move_tac"];
            this.relationmessage_move = this.Relations["message_move"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "NewDataSet";
            this.Prefix = "";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablemessage = new messageDataTable();
            base.Tables.Add(this.tablemessage);
            this.tableplayerLogin = new playerLoginDataTable();
            base.Tables.Add(this.tableplayerLogin);
            this.tablegameMasterLogin = new gameMasterLoginDataTable();
            base.Tables.Add(this.tablegameMasterLogin);
            this.tableplayer = new playerDataTable();
            base.Tables.Add(this.tableplayer);
            this.tableresponse = new responseDataTable();
            base.Tables.Add(this.tableresponse);
            this.tableerror = new errorDataTable();
            base.Tables.Add(this.tableerror);
            this.tablegameId = new gameIdDataTable();
            base.Tables.Add(this.tablegameId);
            this.tablenextPlayer = new nextPlayerDataTable();
            base.Tables.Add(this.tablenextPlayer);
            this.tablegameOver = new gameOverDataTable();
            base.Tables.Add(this.tablegameOver);
            this.tablegameState = new gameStateDataTable();
            base.Tables.Add(this.tablegameState);
            this.tabletic = new ticDataTable();
            base.Tables.Add(this.tabletic);
            this.tabletac = new tacDataTable();
            base.Tables.Add(this.tabletac);
            this.tablemove = new moveDataTable();
            base.Tables.Add(this.tablemove);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("message_playerLogin", new global::System.Data.DataColumn[] {
                        this.tablemessage.message_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableplayerLogin.message_IdColumn});
            this.tableplayerLogin.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("message_gameMasterLogin", new global::System.Data.DataColumn[] {
                        this.tablemessage.message_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablegameMasterLogin.message_IdColumn});
            this.tablegameMasterLogin.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("gameOver_player", new global::System.Data.DataColumn[] {
                        this.tablegameOver.gameOver_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableplayer.gameOver_IdColumn});
            this.tableplayer.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("message_player", new global::System.Data.DataColumn[] {
                        this.tablemessage.message_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableplayer.message_IdColumn});
            this.tableplayer.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("message_response", new global::System.Data.DataColumn[] {
                        this.tablemessage.message_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableresponse.message_IdColumn});
            this.tableresponse.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("message_error", new global::System.Data.DataColumn[] {
                        this.tablemessage.message_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableerror.message_IdColumn});
            this.tableerror.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("message_gameId", new global::System.Data.DataColumn[] {
                        this.tablemessage.message_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablegameId.message_IdColumn});
            this.tablegameId.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("message_nextPlayer", new global::System.Data.DataColumn[] {
                        this.tablemessage.message_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablenextPlayer.message_IdColumn});
            this.tablenextPlayer.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("message_gameOver", new global::System.Data.DataColumn[] {
                        this.tablemessage.message_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablegameOver.message_IdColumn});
            this.tablegameOver.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("message_gameState", new global::System.Data.DataColumn[] {
                        this.tablemessage.message_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablegameState.message_IdColumn});
            this.tablegameState.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("gameState_tic", new global::System.Data.DataColumn[] {
                        this.tablegameState.gameState_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabletic.gameState_IdColumn});
            this.tabletic.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("move_tic", new global::System.Data.DataColumn[] {
                        this.tablemove.move_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabletic.move_IdColumn});
            this.tabletic.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("gameState_tac", new global::System.Data.DataColumn[] {
                        this.tablegameState.gameState_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabletac.gameState_IdColumn});
            this.tabletac.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("move_tac", new global::System.Data.DataColumn[] {
                        this.tablemove.move_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabletac.move_IdColumn});
            this.tabletac.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("message_move", new global::System.Data.DataColumn[] {
                        this.tablemessage.message_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablemove.message_IdColumn});
            this.tablemove.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationmessage_playerLogin = new global::System.Data.DataRelation("message_playerLogin", new global::System.Data.DataColumn[] {
                        this.tablemessage.message_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableplayerLogin.message_IdColumn}, false);
            this.relationmessage_playerLogin.Nested = true;
            this.Relations.Add(this.relationmessage_playerLogin);
            this.relationmessage_gameMasterLogin = new global::System.Data.DataRelation("message_gameMasterLogin", new global::System.Data.DataColumn[] {
                        this.tablemessage.message_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablegameMasterLogin.message_IdColumn}, false);
            this.relationmessage_gameMasterLogin.Nested = true;
            this.Relations.Add(this.relationmessage_gameMasterLogin);
            this.relationgameOver_player = new global::System.Data.DataRelation("gameOver_player", new global::System.Data.DataColumn[] {
                        this.tablegameOver.gameOver_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableplayer.gameOver_IdColumn}, false);
            this.relationgameOver_player.Nested = true;
            this.Relations.Add(this.relationgameOver_player);
            this.relationmessage_player = new global::System.Data.DataRelation("message_player", new global::System.Data.DataColumn[] {
                        this.tablemessage.message_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableplayer.message_IdColumn}, false);
            this.relationmessage_player.Nested = true;
            this.Relations.Add(this.relationmessage_player);
            this.relationmessage_response = new global::System.Data.DataRelation("message_response", new global::System.Data.DataColumn[] {
                        this.tablemessage.message_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableresponse.message_IdColumn}, false);
            this.relationmessage_response.Nested = true;
            this.Relations.Add(this.relationmessage_response);
            this.relationmessage_error = new global::System.Data.DataRelation("message_error", new global::System.Data.DataColumn[] {
                        this.tablemessage.message_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableerror.message_IdColumn}, false);
            this.relationmessage_error.Nested = true;
            this.Relations.Add(this.relationmessage_error);
            this.relationmessage_gameId = new global::System.Data.DataRelation("message_gameId", new global::System.Data.DataColumn[] {
                        this.tablemessage.message_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablegameId.message_IdColumn}, false);
            this.relationmessage_gameId.Nested = true;
            this.Relations.Add(this.relationmessage_gameId);
            this.relationmessage_nextPlayer = new global::System.Data.DataRelation("message_nextPlayer", new global::System.Data.DataColumn[] {
                        this.tablemessage.message_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablenextPlayer.message_IdColumn}, false);
            this.relationmessage_nextPlayer.Nested = true;
            this.Relations.Add(this.relationmessage_nextPlayer);
            this.relationmessage_gameOver = new global::System.Data.DataRelation("message_gameOver", new global::System.Data.DataColumn[] {
                        this.tablemessage.message_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablegameOver.message_IdColumn}, false);
            this.relationmessage_gameOver.Nested = true;
            this.Relations.Add(this.relationmessage_gameOver);
            this.relationmessage_gameState = new global::System.Data.DataRelation("message_gameState", new global::System.Data.DataColumn[] {
                        this.tablemessage.message_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablegameState.message_IdColumn}, false);
            this.relationmessage_gameState.Nested = true;
            this.Relations.Add(this.relationmessage_gameState);
            this.relationgameState_tic = new global::System.Data.DataRelation("gameState_tic", new global::System.Data.DataColumn[] {
                        this.tablegameState.gameState_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabletic.gameState_IdColumn}, false);
            this.relationgameState_tic.Nested = true;
            this.Relations.Add(this.relationgameState_tic);
            this.relationmove_tic = new global::System.Data.DataRelation("move_tic", new global::System.Data.DataColumn[] {
                        this.tablemove.move_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabletic.move_IdColumn}, false);
            this.relationmove_tic.Nested = true;
            this.Relations.Add(this.relationmove_tic);
            this.relationgameState_tac = new global::System.Data.DataRelation("gameState_tac", new global::System.Data.DataColumn[] {
                        this.tablegameState.gameState_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabletac.gameState_IdColumn}, false);
            this.relationgameState_tac.Nested = true;
            this.Relations.Add(this.relationgameState_tac);
            this.relationmove_tac = new global::System.Data.DataRelation("move_tac", new global::System.Data.DataColumn[] {
                        this.tablemove.move_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabletac.move_IdColumn}, false);
            this.relationmove_tac.Nested = true;
            this.Relations.Add(this.relationmove_tac);
            this.relationmessage_move = new global::System.Data.DataRelation("message_move", new global::System.Data.DataColumn[] {
                        this.tablemessage.message_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablemove.message_IdColumn}, false);
            this.relationmessage_move.Nested = true;
            this.Relations.Add(this.relationmessage_move);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializemessage() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeplayerLogin() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializegameMasterLogin() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeplayer() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeresponse() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeerror() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializegameId() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializenextPlayer() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializegameOver() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializegameState() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetic() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetac() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializemove() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            NewDataSet ds = new NewDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void messageRowChangeEventHandler(object sender, messageRowChangeEvent e);
        
        public delegate void playerLoginRowChangeEventHandler(object sender, playerLoginRowChangeEvent e);
        
        public delegate void gameMasterLoginRowChangeEventHandler(object sender, gameMasterLoginRowChangeEvent e);
        
        public delegate void playerRowChangeEventHandler(object sender, playerRowChangeEvent e);
        
        public delegate void responseRowChangeEventHandler(object sender, responseRowChangeEvent e);
        
        public delegate void errorRowChangeEventHandler(object sender, errorRowChangeEvent e);
        
        public delegate void gameIdRowChangeEventHandler(object sender, gameIdRowChangeEvent e);
        
        public delegate void nextPlayerRowChangeEventHandler(object sender, nextPlayerRowChangeEvent e);
        
        public delegate void gameOverRowChangeEventHandler(object sender, gameOverRowChangeEvent e);
        
        public delegate void gameStateRowChangeEventHandler(object sender, gameStateRowChangeEvent e);
        
        public delegate void ticRowChangeEventHandler(object sender, ticRowChangeEvent e);
        
        public delegate void tacRowChangeEventHandler(object sender, tacRowChangeEvent e);
        
        public delegate void moveRowChangeEventHandler(object sender, moveRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class messageDataTable : global::System.Data.TypedTableBase<messageRow> {
            
            private global::System.Data.DataColumn columntype;
            
            private global::System.Data.DataColumn columnmessage_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public messageDataTable() {
                this.TableName = "message";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal messageDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected messageDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn message_IdColumn {
                get {
                    return this.columnmessage_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public messageRow this[int index] {
                get {
                    return ((messageRow)(this.Rows[index]));
                }
            }
            
            public event messageRowChangeEventHandler messageRowChanging;
            
            public event messageRowChangeEventHandler messageRowChanged;
            
            public event messageRowChangeEventHandler messageRowDeleting;
            
            public event messageRowChangeEventHandler messageRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddmessageRow(messageRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public messageRow AddmessageRow(string type) {
                messageRow rowmessageRow = ((messageRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        type,
                        null};
                rowmessageRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowmessageRow);
                return rowmessageRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                messageDataTable cln = ((messageDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new messageDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntype = base.Columns["type"];
                this.columnmessage_Id = base.Columns["message_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntype = new global::System.Data.DataColumn("type", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columntype);
                this.columnmessage_Id = new global::System.Data.DataColumn("message_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnmessage_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnmessage_Id}, true));
                this.columntype.Namespace = "";
                this.columnmessage_Id.AutoIncrement = true;
                this.columnmessage_Id.AllowDBNull = false;
                this.columnmessage_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public messageRow NewmessageRow() {
                return ((messageRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new messageRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(messageRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.messageRowChanged != null)) {
                    this.messageRowChanged(this, new messageRowChangeEvent(((messageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.messageRowChanging != null)) {
                    this.messageRowChanging(this, new messageRowChangeEvent(((messageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.messageRowDeleted != null)) {
                    this.messageRowDeleted(this, new messageRowChangeEvent(((messageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.messageRowDeleting != null)) {
                    this.messageRowDeleting(this, new messageRowChangeEvent(((messageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovemessageRow(messageRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "messageDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class playerLoginDataTable : global::System.Data.TypedTableBase<playerLoginRow> {
            
            private global::System.Data.DataColumn columnnick;
            
            private global::System.Data.DataColumn columngameType;
            
            private global::System.Data.DataColumn columnmessage_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public playerLoginDataTable() {
                this.TableName = "playerLogin";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal playerLoginDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected playerLoginDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nickColumn {
                get {
                    return this.columnnick;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gameTypeColumn {
                get {
                    return this.columngameType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn message_IdColumn {
                get {
                    return this.columnmessage_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public playerLoginRow this[int index] {
                get {
                    return ((playerLoginRow)(this.Rows[index]));
                }
            }
            
            public event playerLoginRowChangeEventHandler playerLoginRowChanging;
            
            public event playerLoginRowChangeEventHandler playerLoginRowChanged;
            
            public event playerLoginRowChangeEventHandler playerLoginRowDeleting;
            
            public event playerLoginRowChangeEventHandler playerLoginRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddplayerLoginRow(playerLoginRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public playerLoginRow AddplayerLoginRow(string nick, string gameType, messageRow parentmessageRowBymessage_playerLogin) {
                playerLoginRow rowplayerLoginRow = ((playerLoginRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        nick,
                        gameType,
                        null};
                if ((parentmessageRowBymessage_playerLogin != null)) {
                    columnValuesArray[2] = parentmessageRowBymessage_playerLogin[1];
                }
                rowplayerLoginRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowplayerLoginRow);
                return rowplayerLoginRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                playerLoginDataTable cln = ((playerLoginDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new playerLoginDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnnick = base.Columns["nick"];
                this.columngameType = base.Columns["gameType"];
                this.columnmessage_Id = base.Columns["message_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnnick = new global::System.Data.DataColumn("nick", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnnick);
                this.columngameType = new global::System.Data.DataColumn("gameType", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columngameType);
                this.columnmessage_Id = new global::System.Data.DataColumn("message_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnmessage_Id);
                this.columnnick.Namespace = "";
                this.columngameType.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public playerLoginRow NewplayerLoginRow() {
                return ((playerLoginRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new playerLoginRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(playerLoginRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.playerLoginRowChanged != null)) {
                    this.playerLoginRowChanged(this, new playerLoginRowChangeEvent(((playerLoginRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.playerLoginRowChanging != null)) {
                    this.playerLoginRowChanging(this, new playerLoginRowChangeEvent(((playerLoginRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.playerLoginRowDeleted != null)) {
                    this.playerLoginRowDeleted(this, new playerLoginRowChangeEvent(((playerLoginRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.playerLoginRowDeleting != null)) {
                    this.playerLoginRowDeleting(this, new playerLoginRowChangeEvent(((playerLoginRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveplayerLoginRow(playerLoginRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "playerLoginDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class gameMasterLoginDataTable : global::System.Data.TypedTableBase<gameMasterLoginRow> {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columngameType;
            
            private global::System.Data.DataColumn columnplayersMin;
            
            private global::System.Data.DataColumn columnplayersMax;
            
            private global::System.Data.DataColumn columnmessage_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public gameMasterLoginDataTable() {
                this.TableName = "gameMasterLogin";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal gameMasterLoginDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected gameMasterLoginDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gameTypeColumn {
                get {
                    return this.columngameType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn playersMinColumn {
                get {
                    return this.columnplayersMin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn playersMaxColumn {
                get {
                    return this.columnplayersMax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn message_IdColumn {
                get {
                    return this.columnmessage_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public gameMasterLoginRow this[int index] {
                get {
                    return ((gameMasterLoginRow)(this.Rows[index]));
                }
            }
            
            public event gameMasterLoginRowChangeEventHandler gameMasterLoginRowChanging;
            
            public event gameMasterLoginRowChangeEventHandler gameMasterLoginRowChanged;
            
            public event gameMasterLoginRowChangeEventHandler gameMasterLoginRowDeleting;
            
            public event gameMasterLoginRowChangeEventHandler gameMasterLoginRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddgameMasterLoginRow(gameMasterLoginRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public gameMasterLoginRow AddgameMasterLoginRow(string id, string gameType, int playersMin, int playersMax, messageRow parentmessageRowBymessage_gameMasterLogin) {
                gameMasterLoginRow rowgameMasterLoginRow = ((gameMasterLoginRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        gameType,
                        playersMin,
                        playersMax,
                        null};
                if ((parentmessageRowBymessage_gameMasterLogin != null)) {
                    columnValuesArray[4] = parentmessageRowBymessage_gameMasterLogin[1];
                }
                rowgameMasterLoginRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowgameMasterLoginRow);
                return rowgameMasterLoginRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                gameMasterLoginDataTable cln = ((gameMasterLoginDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new gameMasterLoginDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columngameType = base.Columns["gameType"];
                this.columnplayersMin = base.Columns["playersMin"];
                this.columnplayersMax = base.Columns["playersMax"];
                this.columnmessage_Id = base.Columns["message_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnid);
                this.columngameType = new global::System.Data.DataColumn("gameType", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columngameType);
                this.columnplayersMin = new global::System.Data.DataColumn("playersMin", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnplayersMin);
                this.columnplayersMax = new global::System.Data.DataColumn("playersMax", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnplayersMax);
                this.columnmessage_Id = new global::System.Data.DataColumn("message_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnmessage_Id);
                this.columnid.Namespace = "";
                this.columngameType.Namespace = "";
                this.columnplayersMin.Namespace = "";
                this.columnplayersMax.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public gameMasterLoginRow NewgameMasterLoginRow() {
                return ((gameMasterLoginRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new gameMasterLoginRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(gameMasterLoginRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.gameMasterLoginRowChanged != null)) {
                    this.gameMasterLoginRowChanged(this, new gameMasterLoginRowChangeEvent(((gameMasterLoginRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.gameMasterLoginRowChanging != null)) {
                    this.gameMasterLoginRowChanging(this, new gameMasterLoginRowChangeEvent(((gameMasterLoginRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.gameMasterLoginRowDeleted != null)) {
                    this.gameMasterLoginRowDeleted(this, new gameMasterLoginRowChangeEvent(((gameMasterLoginRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.gameMasterLoginRowDeleting != null)) {
                    this.gameMasterLoginRowDeleting(this, new gameMasterLoginRowChangeEvent(((gameMasterLoginRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovegameMasterLoginRow(gameMasterLoginRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "gameMasterLoginDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class playerDataTable : global::System.Data.TypedTableBase<playerRow> {
            
            private global::System.Data.DataColumn columnnick;
            
            private global::System.Data.DataColumn columnwin;
            
            private global::System.Data.DataColumn columnlost;
            
            private global::System.Data.DataColumn columngameOver_Id;
            
            private global::System.Data.DataColumn columnmessage_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public playerDataTable() {
                this.TableName = "player";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal playerDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected playerDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nickColumn {
                get {
                    return this.columnnick;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn winColumn {
                get {
                    return this.columnwin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn lostColumn {
                get {
                    return this.columnlost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gameOver_IdColumn {
                get {
                    return this.columngameOver_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn message_IdColumn {
                get {
                    return this.columnmessage_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public playerRow this[int index] {
                get {
                    return ((playerRow)(this.Rows[index]));
                }
            }
            
            public event playerRowChangeEventHandler playerRowChanging;
            
            public event playerRowChangeEventHandler playerRowChanged;
            
            public event playerRowChangeEventHandler playerRowDeleting;
            
            public event playerRowChangeEventHandler playerRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddplayerRow(playerRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public playerRow AddplayerRow(string nick, int win, int lost, gameOverRow parentgameOverRowBygameOver_player, messageRow parentmessageRowBymessage_player) {
                playerRow rowplayerRow = ((playerRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        nick,
                        win,
                        lost,
                        null,
                        null};
                if ((parentgameOverRowBygameOver_player != null)) {
                    columnValuesArray[3] = parentgameOverRowBygameOver_player[0];
                }
                if ((parentmessageRowBymessage_player != null)) {
                    columnValuesArray[4] = parentmessageRowBymessage_player[1];
                }
                rowplayerRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowplayerRow);
                return rowplayerRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                playerDataTable cln = ((playerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new playerDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnnick = base.Columns["nick"];
                this.columnwin = base.Columns["win"];
                this.columnlost = base.Columns["lost"];
                this.columngameOver_Id = base.Columns["gameOver_Id"];
                this.columnmessage_Id = base.Columns["message_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnnick = new global::System.Data.DataColumn("nick", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnnick);
                this.columnwin = new global::System.Data.DataColumn("win", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnwin);
                this.columnlost = new global::System.Data.DataColumn("lost", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnlost);
                this.columngameOver_Id = new global::System.Data.DataColumn("gameOver_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columngameOver_Id);
                this.columnmessage_Id = new global::System.Data.DataColumn("message_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnmessage_Id);
                this.columnnick.AllowDBNull = false;
                this.columnnick.Namespace = "";
                this.columnwin.Namespace = "";
                this.columnlost.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public playerRow NewplayerRow() {
                return ((playerRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new playerRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(playerRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.playerRowChanged != null)) {
                    this.playerRowChanged(this, new playerRowChangeEvent(((playerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.playerRowChanging != null)) {
                    this.playerRowChanging(this, new playerRowChangeEvent(((playerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.playerRowDeleted != null)) {
                    this.playerRowDeleted(this, new playerRowChangeEvent(((playerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.playerRowDeleting != null)) {
                    this.playerRowDeleting(this, new playerRowChangeEvent(((playerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveplayerRow(playerRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "playerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class responseDataTable : global::System.Data.TypedTableBase<responseRow> {
            
            private global::System.Data.DataColumn columnaccept;
            
            private global::System.Data.DataColumn columnmessage_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public responseDataTable() {
                this.TableName = "response";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal responseDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected responseDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn acceptColumn {
                get {
                    return this.columnaccept;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn message_IdColumn {
                get {
                    return this.columnmessage_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public responseRow this[int index] {
                get {
                    return ((responseRow)(this.Rows[index]));
                }
            }
            
            public event responseRowChangeEventHandler responseRowChanging;
            
            public event responseRowChangeEventHandler responseRowChanged;
            
            public event responseRowChangeEventHandler responseRowDeleting;
            
            public event responseRowChangeEventHandler responseRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddresponseRow(responseRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public responseRow AddresponseRow(string accept, messageRow parentmessageRowBymessage_response) {
                responseRow rowresponseRow = ((responseRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        accept,
                        null};
                if ((parentmessageRowBymessage_response != null)) {
                    columnValuesArray[1] = parentmessageRowBymessage_response[1];
                }
                rowresponseRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowresponseRow);
                return rowresponseRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                responseDataTable cln = ((responseDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new responseDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnaccept = base.Columns["accept"];
                this.columnmessage_Id = base.Columns["message_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnaccept = new global::System.Data.DataColumn("accept", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnaccept);
                this.columnmessage_Id = new global::System.Data.DataColumn("message_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnmessage_Id);
                this.columnaccept.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public responseRow NewresponseRow() {
                return ((responseRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new responseRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(responseRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.responseRowChanged != null)) {
                    this.responseRowChanged(this, new responseRowChangeEvent(((responseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.responseRowChanging != null)) {
                    this.responseRowChanging(this, new responseRowChangeEvent(((responseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.responseRowDeleted != null)) {
                    this.responseRowDeleted(this, new responseRowChangeEvent(((responseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.responseRowDeleting != null)) {
                    this.responseRowDeleting(this, new responseRowChangeEvent(((responseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveresponseRow(responseRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "responseDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class errorDataTable : global::System.Data.TypedTableBase<errorRow> {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnmessage_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public errorDataTable() {
                this.TableName = "error";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal errorDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected errorDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn message_IdColumn {
                get {
                    return this.columnmessage_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public errorRow this[int index] {
                get {
                    return ((errorRow)(this.Rows[index]));
                }
            }
            
            public event errorRowChangeEventHandler errorRowChanging;
            
            public event errorRowChangeEventHandler errorRowChanged;
            
            public event errorRowChangeEventHandler errorRowDeleting;
            
            public event errorRowChangeEventHandler errorRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdderrorRow(errorRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public errorRow AdderrorRow(int id, messageRow parentmessageRowBymessage_error) {
                errorRow rowerrorRow = ((errorRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        null};
                if ((parentmessageRowBymessage_error != null)) {
                    columnValuesArray[1] = parentmessageRowBymessage_error[1];
                }
                rowerrorRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowerrorRow);
                return rowerrorRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                errorDataTable cln = ((errorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new errorDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnmessage_Id = base.Columns["message_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnid);
                this.columnmessage_Id = new global::System.Data.DataColumn("message_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnmessage_Id);
                this.columnid.AllowDBNull = false;
                this.columnid.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public errorRow NewerrorRow() {
                return ((errorRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new errorRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(errorRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.errorRowChanged != null)) {
                    this.errorRowChanged(this, new errorRowChangeEvent(((errorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.errorRowChanging != null)) {
                    this.errorRowChanging(this, new errorRowChangeEvent(((errorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.errorRowDeleted != null)) {
                    this.errorRowDeleted(this, new errorRowChangeEvent(((errorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.errorRowDeleting != null)) {
                    this.errorRowDeleting(this, new errorRowChangeEvent(((errorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveerrorRow(errorRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "errorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class gameIdDataTable : global::System.Data.TypedTableBase<gameIdRow> {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnmessage_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public gameIdDataTable() {
                this.TableName = "gameId";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal gameIdDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected gameIdDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn message_IdColumn {
                get {
                    return this.columnmessage_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public gameIdRow this[int index] {
                get {
                    return ((gameIdRow)(this.Rows[index]));
                }
            }
            
            public event gameIdRowChangeEventHandler gameIdRowChanging;
            
            public event gameIdRowChangeEventHandler gameIdRowChanged;
            
            public event gameIdRowChangeEventHandler gameIdRowDeleting;
            
            public event gameIdRowChangeEventHandler gameIdRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddgameIdRow(gameIdRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public gameIdRow AddgameIdRow(string id, messageRow parentmessageRowBymessage_gameId) {
                gameIdRow rowgameIdRow = ((gameIdRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        null};
                if ((parentmessageRowBymessage_gameId != null)) {
                    columnValuesArray[1] = parentmessageRowBymessage_gameId[1];
                }
                rowgameIdRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowgameIdRow);
                return rowgameIdRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                gameIdDataTable cln = ((gameIdDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new gameIdDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnmessage_Id = base.Columns["message_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnid);
                this.columnmessage_Id = new global::System.Data.DataColumn("message_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnmessage_Id);
                this.columnid.AllowDBNull = false;
                this.columnid.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public gameIdRow NewgameIdRow() {
                return ((gameIdRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new gameIdRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(gameIdRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.gameIdRowChanged != null)) {
                    this.gameIdRowChanged(this, new gameIdRowChangeEvent(((gameIdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.gameIdRowChanging != null)) {
                    this.gameIdRowChanging(this, new gameIdRowChangeEvent(((gameIdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.gameIdRowDeleted != null)) {
                    this.gameIdRowDeleted(this, new gameIdRowChangeEvent(((gameIdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.gameIdRowDeleting != null)) {
                    this.gameIdRowDeleting(this, new gameIdRowChangeEvent(((gameIdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovegameIdRow(gameIdRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "gameIdDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class nextPlayerDataTable : global::System.Data.TypedTableBase<nextPlayerRow> {
            
            private global::System.Data.DataColumn columnnick;
            
            private global::System.Data.DataColumn columnmessage_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public nextPlayerDataTable() {
                this.TableName = "nextPlayer";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal nextPlayerDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected nextPlayerDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nickColumn {
                get {
                    return this.columnnick;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn message_IdColumn {
                get {
                    return this.columnmessage_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public nextPlayerRow this[int index] {
                get {
                    return ((nextPlayerRow)(this.Rows[index]));
                }
            }
            
            public event nextPlayerRowChangeEventHandler nextPlayerRowChanging;
            
            public event nextPlayerRowChangeEventHandler nextPlayerRowChanged;
            
            public event nextPlayerRowChangeEventHandler nextPlayerRowDeleting;
            
            public event nextPlayerRowChangeEventHandler nextPlayerRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddnextPlayerRow(nextPlayerRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public nextPlayerRow AddnextPlayerRow(string nick, messageRow parentmessageRowBymessage_nextPlayer) {
                nextPlayerRow rownextPlayerRow = ((nextPlayerRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        nick,
                        null};
                if ((parentmessageRowBymessage_nextPlayer != null)) {
                    columnValuesArray[1] = parentmessageRowBymessage_nextPlayer[1];
                }
                rownextPlayerRow.ItemArray = columnValuesArray;
                this.Rows.Add(rownextPlayerRow);
                return rownextPlayerRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                nextPlayerDataTable cln = ((nextPlayerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new nextPlayerDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnnick = base.Columns["nick"];
                this.columnmessage_Id = base.Columns["message_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnnick = new global::System.Data.DataColumn("nick", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnnick);
                this.columnmessage_Id = new global::System.Data.DataColumn("message_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnmessage_Id);
                this.columnnick.AllowDBNull = false;
                this.columnnick.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public nextPlayerRow NewnextPlayerRow() {
                return ((nextPlayerRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new nextPlayerRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(nextPlayerRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.nextPlayerRowChanged != null)) {
                    this.nextPlayerRowChanged(this, new nextPlayerRowChangeEvent(((nextPlayerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.nextPlayerRowChanging != null)) {
                    this.nextPlayerRowChanging(this, new nextPlayerRowChangeEvent(((nextPlayerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.nextPlayerRowDeleted != null)) {
                    this.nextPlayerRowDeleted(this, new nextPlayerRowChangeEvent(((nextPlayerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.nextPlayerRowDeleting != null)) {
                    this.nextPlayerRowDeleting(this, new nextPlayerRowChangeEvent(((nextPlayerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovenextPlayerRow(nextPlayerRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "nextPlayerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class gameOverDataTable : global::System.Data.TypedTableBase<gameOverRow> {
            
            private global::System.Data.DataColumn columngameOver_Id;
            
            private global::System.Data.DataColumn columnmessage_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public gameOverDataTable() {
                this.TableName = "gameOver";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal gameOverDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected gameOverDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gameOver_IdColumn {
                get {
                    return this.columngameOver_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn message_IdColumn {
                get {
                    return this.columnmessage_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public gameOverRow this[int index] {
                get {
                    return ((gameOverRow)(this.Rows[index]));
                }
            }
            
            public event gameOverRowChangeEventHandler gameOverRowChanging;
            
            public event gameOverRowChangeEventHandler gameOverRowChanged;
            
            public event gameOverRowChangeEventHandler gameOverRowDeleting;
            
            public event gameOverRowChangeEventHandler gameOverRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddgameOverRow(gameOverRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public gameOverRow AddgameOverRow(messageRow parentmessageRowBymessage_gameOver) {
                gameOverRow rowgameOverRow = ((gameOverRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentmessageRowBymessage_gameOver != null)) {
                    columnValuesArray[1] = parentmessageRowBymessage_gameOver[1];
                }
                rowgameOverRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowgameOverRow);
                return rowgameOverRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                gameOverDataTable cln = ((gameOverDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new gameOverDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columngameOver_Id = base.Columns["gameOver_Id"];
                this.columnmessage_Id = base.Columns["message_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columngameOver_Id = new global::System.Data.DataColumn("gameOver_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columngameOver_Id);
                this.columnmessage_Id = new global::System.Data.DataColumn("message_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnmessage_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columngameOver_Id}, true));
                this.columngameOver_Id.AutoIncrement = true;
                this.columngameOver_Id.AllowDBNull = false;
                this.columngameOver_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public gameOverRow NewgameOverRow() {
                return ((gameOverRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new gameOverRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(gameOverRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.gameOverRowChanged != null)) {
                    this.gameOverRowChanged(this, new gameOverRowChangeEvent(((gameOverRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.gameOverRowChanging != null)) {
                    this.gameOverRowChanging(this, new gameOverRowChangeEvent(((gameOverRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.gameOverRowDeleted != null)) {
                    this.gameOverRowDeleted(this, new gameOverRowChangeEvent(((gameOverRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.gameOverRowDeleting != null)) {
                    this.gameOverRowDeleting(this, new gameOverRowChangeEvent(((gameOverRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovegameOverRow(gameOverRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "gameOverDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class gameStateDataTable : global::System.Data.TypedTableBase<gameStateRow> {
            
            private global::System.Data.DataColumn columngameState_Id;
            
            private global::System.Data.DataColumn columnmessage_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public gameStateDataTable() {
                this.TableName = "gameState";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal gameStateDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected gameStateDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gameState_IdColumn {
                get {
                    return this.columngameState_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn message_IdColumn {
                get {
                    return this.columnmessage_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public gameStateRow this[int index] {
                get {
                    return ((gameStateRow)(this.Rows[index]));
                }
            }
            
            public event gameStateRowChangeEventHandler gameStateRowChanging;
            
            public event gameStateRowChangeEventHandler gameStateRowChanged;
            
            public event gameStateRowChangeEventHandler gameStateRowDeleting;
            
            public event gameStateRowChangeEventHandler gameStateRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddgameStateRow(gameStateRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public gameStateRow AddgameStateRow(messageRow parentmessageRowBymessage_gameState) {
                gameStateRow rowgameStateRow = ((gameStateRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentmessageRowBymessage_gameState != null)) {
                    columnValuesArray[1] = parentmessageRowBymessage_gameState[1];
                }
                rowgameStateRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowgameStateRow);
                return rowgameStateRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                gameStateDataTable cln = ((gameStateDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new gameStateDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columngameState_Id = base.Columns["gameState_Id"];
                this.columnmessage_Id = base.Columns["message_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columngameState_Id = new global::System.Data.DataColumn("gameState_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columngameState_Id);
                this.columnmessage_Id = new global::System.Data.DataColumn("message_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnmessage_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columngameState_Id}, true));
                this.columngameState_Id.AutoIncrement = true;
                this.columngameState_Id.AllowDBNull = false;
                this.columngameState_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public gameStateRow NewgameStateRow() {
                return ((gameStateRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new gameStateRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(gameStateRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.gameStateRowChanged != null)) {
                    this.gameStateRowChanged(this, new gameStateRowChangeEvent(((gameStateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.gameStateRowChanging != null)) {
                    this.gameStateRowChanging(this, new gameStateRowChangeEvent(((gameStateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.gameStateRowDeleted != null)) {
                    this.gameStateRowDeleted(this, new gameStateRowChangeEvent(((gameStateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.gameStateRowDeleting != null)) {
                    this.gameStateRowDeleting(this, new gameStateRowChangeEvent(((gameStateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovegameStateRow(gameStateRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "gameStateDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ticDataTable : global::System.Data.TypedTableBase<ticRow> {
            
            private global::System.Data.DataColumn columnx;
            
            private global::System.Data.DataColumn columny;
            
            private global::System.Data.DataColumn columngameState_Id;
            
            private global::System.Data.DataColumn columnmove_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ticDataTable() {
                this.TableName = "tic";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ticDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ticDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xColumn {
                get {
                    return this.columnx;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn yColumn {
                get {
                    return this.columny;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gameState_IdColumn {
                get {
                    return this.columngameState_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn move_IdColumn {
                get {
                    return this.columnmove_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ticRow this[int index] {
                get {
                    return ((ticRow)(this.Rows[index]));
                }
            }
            
            public event ticRowChangeEventHandler ticRowChanging;
            
            public event ticRowChangeEventHandler ticRowChanged;
            
            public event ticRowChangeEventHandler ticRowDeleting;
            
            public event ticRowChangeEventHandler ticRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddticRow(ticRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ticRow AddticRow(int x, int y, gameStateRow parentgameStateRowBygameState_tic, moveRow parentmoveRowBymove_tic) {
                ticRow rowticRow = ((ticRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        x,
                        y,
                        null,
                        null};
                if ((parentgameStateRowBygameState_tic != null)) {
                    columnValuesArray[2] = parentgameStateRowBygameState_tic[0];
                }
                if ((parentmoveRowBymove_tic != null)) {
                    columnValuesArray[3] = parentmoveRowBymove_tic[0];
                }
                rowticRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowticRow);
                return rowticRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ticDataTable cln = ((ticDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ticDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnx = base.Columns["x"];
                this.columny = base.Columns["y"];
                this.columngameState_Id = base.Columns["gameState_Id"];
                this.columnmove_Id = base.Columns["move_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnx = new global::System.Data.DataColumn("x", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnx);
                this.columny = new global::System.Data.DataColumn("y", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columny);
                this.columngameState_Id = new global::System.Data.DataColumn("gameState_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columngameState_Id);
                this.columnmove_Id = new global::System.Data.DataColumn("move_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnmove_Id);
                this.columnx.AllowDBNull = false;
                this.columnx.Namespace = "";
                this.columny.AllowDBNull = false;
                this.columny.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ticRow NewticRow() {
                return ((ticRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ticRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ticRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ticRowChanged != null)) {
                    this.ticRowChanged(this, new ticRowChangeEvent(((ticRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ticRowChanging != null)) {
                    this.ticRowChanging(this, new ticRowChangeEvent(((ticRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ticRowDeleted != null)) {
                    this.ticRowDeleted(this, new ticRowChangeEvent(((ticRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ticRowDeleting != null)) {
                    this.ticRowDeleting(this, new ticRowChangeEvent(((ticRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveticRow(ticRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ticDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tacDataTable : global::System.Data.TypedTableBase<tacRow> {
            
            private global::System.Data.DataColumn columnx;
            
            private global::System.Data.DataColumn columny;
            
            private global::System.Data.DataColumn columngameState_Id;
            
            private global::System.Data.DataColumn columnmove_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tacDataTable() {
                this.TableName = "tac";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tacDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tacDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xColumn {
                get {
                    return this.columnx;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn yColumn {
                get {
                    return this.columny;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gameState_IdColumn {
                get {
                    return this.columngameState_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn move_IdColumn {
                get {
                    return this.columnmove_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tacRow this[int index] {
                get {
                    return ((tacRow)(this.Rows[index]));
                }
            }
            
            public event tacRowChangeEventHandler tacRowChanging;
            
            public event tacRowChangeEventHandler tacRowChanged;
            
            public event tacRowChangeEventHandler tacRowDeleting;
            
            public event tacRowChangeEventHandler tacRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtacRow(tacRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tacRow AddtacRow(int x, int y, gameStateRow parentgameStateRowBygameState_tac, moveRow parentmoveRowBymove_tac) {
                tacRow rowtacRow = ((tacRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        x,
                        y,
                        null,
                        null};
                if ((parentgameStateRowBygameState_tac != null)) {
                    columnValuesArray[2] = parentgameStateRowBygameState_tac[0];
                }
                if ((parentmoveRowBymove_tac != null)) {
                    columnValuesArray[3] = parentmoveRowBymove_tac[0];
                }
                rowtacRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtacRow);
                return rowtacRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tacDataTable cln = ((tacDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tacDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnx = base.Columns["x"];
                this.columny = base.Columns["y"];
                this.columngameState_Id = base.Columns["gameState_Id"];
                this.columnmove_Id = base.Columns["move_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnx = new global::System.Data.DataColumn("x", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnx);
                this.columny = new global::System.Data.DataColumn("y", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columny);
                this.columngameState_Id = new global::System.Data.DataColumn("gameState_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columngameState_Id);
                this.columnmove_Id = new global::System.Data.DataColumn("move_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnmove_Id);
                this.columnx.AllowDBNull = false;
                this.columnx.Namespace = "";
                this.columny.AllowDBNull = false;
                this.columny.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tacRow NewtacRow() {
                return ((tacRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tacRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tacRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tacRowChanged != null)) {
                    this.tacRowChanged(this, new tacRowChangeEvent(((tacRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tacRowChanging != null)) {
                    this.tacRowChanging(this, new tacRowChangeEvent(((tacRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tacRowDeleted != null)) {
                    this.tacRowDeleted(this, new tacRowChangeEvent(((tacRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tacRowDeleting != null)) {
                    this.tacRowDeleting(this, new tacRowChangeEvent(((tacRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetacRow(tacRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tacDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class moveDataTable : global::System.Data.TypedTableBase<moveRow> {
            
            private global::System.Data.DataColumn columnmove_Id;
            
            private global::System.Data.DataColumn columnmessage_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public moveDataTable() {
                this.TableName = "move";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal moveDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected moveDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn move_IdColumn {
                get {
                    return this.columnmove_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn message_IdColumn {
                get {
                    return this.columnmessage_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public moveRow this[int index] {
                get {
                    return ((moveRow)(this.Rows[index]));
                }
            }
            
            public event moveRowChangeEventHandler moveRowChanging;
            
            public event moveRowChangeEventHandler moveRowChanged;
            
            public event moveRowChangeEventHandler moveRowDeleting;
            
            public event moveRowChangeEventHandler moveRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddmoveRow(moveRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public moveRow AddmoveRow(messageRow parentmessageRowBymessage_move) {
                moveRow rowmoveRow = ((moveRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentmessageRowBymessage_move != null)) {
                    columnValuesArray[1] = parentmessageRowBymessage_move[1];
                }
                rowmoveRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowmoveRow);
                return rowmoveRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                moveDataTable cln = ((moveDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new moveDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnmove_Id = base.Columns["move_Id"];
                this.columnmessage_Id = base.Columns["message_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnmove_Id = new global::System.Data.DataColumn("move_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnmove_Id);
                this.columnmessage_Id = new global::System.Data.DataColumn("message_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnmessage_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnmove_Id}, true));
                this.columnmove_Id.AutoIncrement = true;
                this.columnmove_Id.AllowDBNull = false;
                this.columnmove_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public moveRow NewmoveRow() {
                return ((moveRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new moveRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(moveRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.moveRowChanged != null)) {
                    this.moveRowChanged(this, new moveRowChangeEvent(((moveRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.moveRowChanging != null)) {
                    this.moveRowChanging(this, new moveRowChangeEvent(((moveRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.moveRowDeleted != null)) {
                    this.moveRowDeleted(this, new moveRowChangeEvent(((moveRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.moveRowDeleting != null)) {
                    this.moveRowDeleting(this, new moveRowChangeEvent(((moveRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovemoveRow(moveRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "moveDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class messageRow : global::System.Data.DataRow {
            
            private messageDataTable tablemessage;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal messageRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablemessage = ((messageDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string type {
                get {
                    try {
                        return ((string)(this[this.tablemessage.typeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'type\' in table \'message\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemessage.typeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int message_Id {
                get {
                    return ((int)(this[this.tablemessage.message_IdColumn]));
                }
                set {
                    this[this.tablemessage.message_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstypeNull() {
                return this.IsNull(this.tablemessage.typeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettypeNull() {
                this[this.tablemessage.typeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public playerLoginRow[] GetplayerLoginRows() {
                if ((this.Table.ChildRelations["message_playerLogin"] == null)) {
                    return new playerLoginRow[0];
                }
                else {
                    return ((playerLoginRow[])(base.GetChildRows(this.Table.ChildRelations["message_playerLogin"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public gameMasterLoginRow[] GetgameMasterLoginRows() {
                if ((this.Table.ChildRelations["message_gameMasterLogin"] == null)) {
                    return new gameMasterLoginRow[0];
                }
                else {
                    return ((gameMasterLoginRow[])(base.GetChildRows(this.Table.ChildRelations["message_gameMasterLogin"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public playerRow[] GetplayerRows() {
                if ((this.Table.ChildRelations["message_player"] == null)) {
                    return new playerRow[0];
                }
                else {
                    return ((playerRow[])(base.GetChildRows(this.Table.ChildRelations["message_player"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public responseRow[] GetresponseRows() {
                if ((this.Table.ChildRelations["message_response"] == null)) {
                    return new responseRow[0];
                }
                else {
                    return ((responseRow[])(base.GetChildRows(this.Table.ChildRelations["message_response"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public errorRow[] GeterrorRows() {
                if ((this.Table.ChildRelations["message_error"] == null)) {
                    return new errorRow[0];
                }
                else {
                    return ((errorRow[])(base.GetChildRows(this.Table.ChildRelations["message_error"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public gameIdRow[] GetgameIdRows() {
                if ((this.Table.ChildRelations["message_gameId"] == null)) {
                    return new gameIdRow[0];
                }
                else {
                    return ((gameIdRow[])(base.GetChildRows(this.Table.ChildRelations["message_gameId"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public nextPlayerRow[] GetnextPlayerRows() {
                if ((this.Table.ChildRelations["message_nextPlayer"] == null)) {
                    return new nextPlayerRow[0];
                }
                else {
                    return ((nextPlayerRow[])(base.GetChildRows(this.Table.ChildRelations["message_nextPlayer"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public gameOverRow[] GetgameOverRows() {
                if ((this.Table.ChildRelations["message_gameOver"] == null)) {
                    return new gameOverRow[0];
                }
                else {
                    return ((gameOverRow[])(base.GetChildRows(this.Table.ChildRelations["message_gameOver"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public gameStateRow[] GetgameStateRows() {
                if ((this.Table.ChildRelations["message_gameState"] == null)) {
                    return new gameStateRow[0];
                }
                else {
                    return ((gameStateRow[])(base.GetChildRows(this.Table.ChildRelations["message_gameState"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public moveRow[] GetmoveRows() {
                if ((this.Table.ChildRelations["message_move"] == null)) {
                    return new moveRow[0];
                }
                else {
                    return ((moveRow[])(base.GetChildRows(this.Table.ChildRelations["message_move"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class playerLoginRow : global::System.Data.DataRow {
            
            private playerLoginDataTable tableplayerLogin;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal playerLoginRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableplayerLogin = ((playerLoginDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nick {
                get {
                    try {
                        return ((string)(this[this.tableplayerLogin.nickColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'nick\' in table \'playerLogin\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableplayerLogin.nickColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string gameType {
                get {
                    try {
                        return ((string)(this[this.tableplayerLogin.gameTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gameType\' in table \'playerLogin\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableplayerLogin.gameTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int message_Id {
                get {
                    try {
                        return ((int)(this[this.tableplayerLogin.message_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'message_Id\' in table \'playerLogin\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableplayerLogin.message_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public messageRow messageRow {
                get {
                    return ((messageRow)(this.GetParentRow(this.Table.ParentRelations["message_playerLogin"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["message_playerLogin"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnickNull() {
                return this.IsNull(this.tableplayerLogin.nickColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnickNull() {
                this[this.tableplayerLogin.nickColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgameTypeNull() {
                return this.IsNull(this.tableplayerLogin.gameTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgameTypeNull() {
                this[this.tableplayerLogin.gameTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismessage_IdNull() {
                return this.IsNull(this.tableplayerLogin.message_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmessage_IdNull() {
                this[this.tableplayerLogin.message_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class gameMasterLoginRow : global::System.Data.DataRow {
            
            private gameMasterLoginDataTable tablegameMasterLogin;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal gameMasterLoginRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablegameMasterLogin = ((gameMasterLoginDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string id {
                get {
                    try {
                        return ((string)(this[this.tablegameMasterLogin.idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'id\' in table \'gameMasterLogin\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegameMasterLogin.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string gameType {
                get {
                    try {
                        return ((string)(this[this.tablegameMasterLogin.gameTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gameType\' in table \'gameMasterLogin\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegameMasterLogin.gameTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int playersMin {
                get {
                    try {
                        return ((int)(this[this.tablegameMasterLogin.playersMinColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'playersMin\' in table \'gameMasterLogin\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegameMasterLogin.playersMinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int playersMax {
                get {
                    try {
                        return ((int)(this[this.tablegameMasterLogin.playersMaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'playersMax\' in table \'gameMasterLogin\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegameMasterLogin.playersMaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int message_Id {
                get {
                    try {
                        return ((int)(this[this.tablegameMasterLogin.message_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'message_Id\' in table \'gameMasterLogin\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegameMasterLogin.message_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public messageRow messageRow {
                get {
                    return ((messageRow)(this.GetParentRow(this.Table.ParentRelations["message_gameMasterLogin"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["message_gameMasterLogin"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidNull() {
                return this.IsNull(this.tablegameMasterLogin.idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidNull() {
                this[this.tablegameMasterLogin.idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgameTypeNull() {
                return this.IsNull(this.tablegameMasterLogin.gameTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgameTypeNull() {
                this[this.tablegameMasterLogin.gameTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsplayersMinNull() {
                return this.IsNull(this.tablegameMasterLogin.playersMinColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetplayersMinNull() {
                this[this.tablegameMasterLogin.playersMinColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsplayersMaxNull() {
                return this.IsNull(this.tablegameMasterLogin.playersMaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetplayersMaxNull() {
                this[this.tablegameMasterLogin.playersMaxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismessage_IdNull() {
                return this.IsNull(this.tablegameMasterLogin.message_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmessage_IdNull() {
                this[this.tablegameMasterLogin.message_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class playerRow : global::System.Data.DataRow {
            
            private playerDataTable tableplayer;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal playerRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableplayer = ((playerDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nick {
                get {
                    return ((string)(this[this.tableplayer.nickColumn]));
                }
                set {
                    this[this.tableplayer.nickColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int win {
                get {
                    try {
                        return ((int)(this[this.tableplayer.winColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'win\' in table \'player\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableplayer.winColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int lost {
                get {
                    try {
                        return ((int)(this[this.tableplayer.lostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'lost\' in table \'player\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableplayer.lostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int gameOver_Id {
                get {
                    try {
                        return ((int)(this[this.tableplayer.gameOver_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gameOver_Id\' in table \'player\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableplayer.gameOver_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int message_Id {
                get {
                    try {
                        return ((int)(this[this.tableplayer.message_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'message_Id\' in table \'player\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableplayer.message_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public gameOverRow gameOverRow {
                get {
                    return ((gameOverRow)(this.GetParentRow(this.Table.ParentRelations["gameOver_player"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["gameOver_player"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public messageRow messageRow {
                get {
                    return ((messageRow)(this.GetParentRow(this.Table.ParentRelations["message_player"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["message_player"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IswinNull() {
                return this.IsNull(this.tableplayer.winColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetwinNull() {
                this[this.tableplayer.winColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslostNull() {
                return this.IsNull(this.tableplayer.lostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlostNull() {
                this[this.tableplayer.lostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgameOver_IdNull() {
                return this.IsNull(this.tableplayer.gameOver_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgameOver_IdNull() {
                this[this.tableplayer.gameOver_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismessage_IdNull() {
                return this.IsNull(this.tableplayer.message_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmessage_IdNull() {
                this[this.tableplayer.message_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class responseRow : global::System.Data.DataRow {
            
            private responseDataTable tableresponse;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal responseRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableresponse = ((responseDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string accept {
                get {
                    try {
                        return ((string)(this[this.tableresponse.acceptColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'accept\' in table \'response\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableresponse.acceptColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int message_Id {
                get {
                    try {
                        return ((int)(this[this.tableresponse.message_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'message_Id\' in table \'response\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableresponse.message_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public messageRow messageRow {
                get {
                    return ((messageRow)(this.GetParentRow(this.Table.ParentRelations["message_response"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["message_response"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsacceptNull() {
                return this.IsNull(this.tableresponse.acceptColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetacceptNull() {
                this[this.tableresponse.acceptColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismessage_IdNull() {
                return this.IsNull(this.tableresponse.message_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmessage_IdNull() {
                this[this.tableresponse.message_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class errorRow : global::System.Data.DataRow {
            
            private errorDataTable tableerror;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal errorRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableerror = ((errorDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id {
                get {
                    return ((int)(this[this.tableerror.idColumn]));
                }
                set {
                    this[this.tableerror.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int message_Id {
                get {
                    try {
                        return ((int)(this[this.tableerror.message_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'message_Id\' in table \'error\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableerror.message_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public messageRow messageRow {
                get {
                    return ((messageRow)(this.GetParentRow(this.Table.ParentRelations["message_error"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["message_error"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismessage_IdNull() {
                return this.IsNull(this.tableerror.message_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmessage_IdNull() {
                this[this.tableerror.message_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class gameIdRow : global::System.Data.DataRow {
            
            private gameIdDataTable tablegameId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal gameIdRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablegameId = ((gameIdDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string id {
                get {
                    return ((string)(this[this.tablegameId.idColumn]));
                }
                set {
                    this[this.tablegameId.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int message_Id {
                get {
                    try {
                        return ((int)(this[this.tablegameId.message_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'message_Id\' in table \'gameId\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegameId.message_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public messageRow messageRow {
                get {
                    return ((messageRow)(this.GetParentRow(this.Table.ParentRelations["message_gameId"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["message_gameId"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismessage_IdNull() {
                return this.IsNull(this.tablegameId.message_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmessage_IdNull() {
                this[this.tablegameId.message_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class nextPlayerRow : global::System.Data.DataRow {
            
            private nextPlayerDataTable tablenextPlayer;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal nextPlayerRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablenextPlayer = ((nextPlayerDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nick {
                get {
                    return ((string)(this[this.tablenextPlayer.nickColumn]));
                }
                set {
                    this[this.tablenextPlayer.nickColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int message_Id {
                get {
                    try {
                        return ((int)(this[this.tablenextPlayer.message_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'message_Id\' in table \'nextPlayer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablenextPlayer.message_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public messageRow messageRow {
                get {
                    return ((messageRow)(this.GetParentRow(this.Table.ParentRelations["message_nextPlayer"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["message_nextPlayer"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismessage_IdNull() {
                return this.IsNull(this.tablenextPlayer.message_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmessage_IdNull() {
                this[this.tablenextPlayer.message_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class gameOverRow : global::System.Data.DataRow {
            
            private gameOverDataTable tablegameOver;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal gameOverRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablegameOver = ((gameOverDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int gameOver_Id {
                get {
                    return ((int)(this[this.tablegameOver.gameOver_IdColumn]));
                }
                set {
                    this[this.tablegameOver.gameOver_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int message_Id {
                get {
                    try {
                        return ((int)(this[this.tablegameOver.message_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'message_Id\' in table \'gameOver\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegameOver.message_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public messageRow messageRow {
                get {
                    return ((messageRow)(this.GetParentRow(this.Table.ParentRelations["message_gameOver"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["message_gameOver"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismessage_IdNull() {
                return this.IsNull(this.tablegameOver.message_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmessage_IdNull() {
                this[this.tablegameOver.message_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public playerRow[] GetplayerRows() {
                if ((this.Table.ChildRelations["gameOver_player"] == null)) {
                    return new playerRow[0];
                }
                else {
                    return ((playerRow[])(base.GetChildRows(this.Table.ChildRelations["gameOver_player"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class gameStateRow : global::System.Data.DataRow {
            
            private gameStateDataTable tablegameState;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal gameStateRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablegameState = ((gameStateDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int gameState_Id {
                get {
                    return ((int)(this[this.tablegameState.gameState_IdColumn]));
                }
                set {
                    this[this.tablegameState.gameState_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int message_Id {
                get {
                    try {
                        return ((int)(this[this.tablegameState.message_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'message_Id\' in table \'gameState\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegameState.message_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public messageRow messageRow {
                get {
                    return ((messageRow)(this.GetParentRow(this.Table.ParentRelations["message_gameState"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["message_gameState"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismessage_IdNull() {
                return this.IsNull(this.tablegameState.message_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmessage_IdNull() {
                this[this.tablegameState.message_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ticRow[] GetticRows() {
                if ((this.Table.ChildRelations["gameState_tic"] == null)) {
                    return new ticRow[0];
                }
                else {
                    return ((ticRow[])(base.GetChildRows(this.Table.ChildRelations["gameState_tic"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tacRow[] GettacRows() {
                if ((this.Table.ChildRelations["gameState_tac"] == null)) {
                    return new tacRow[0];
                }
                else {
                    return ((tacRow[])(base.GetChildRows(this.Table.ChildRelations["gameState_tac"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ticRow : global::System.Data.DataRow {
            
            private ticDataTable tabletic;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ticRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletic = ((ticDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int x {
                get {
                    return ((int)(this[this.tabletic.xColumn]));
                }
                set {
                    this[this.tabletic.xColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int y {
                get {
                    return ((int)(this[this.tabletic.yColumn]));
                }
                set {
                    this[this.tabletic.yColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int gameState_Id {
                get {
                    try {
                        return ((int)(this[this.tabletic.gameState_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gameState_Id\' in table \'tic\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletic.gameState_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int move_Id {
                get {
                    try {
                        return ((int)(this[this.tabletic.move_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'move_Id\' in table \'tic\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletic.move_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public gameStateRow gameStateRow {
                get {
                    return ((gameStateRow)(this.GetParentRow(this.Table.ParentRelations["gameState_tic"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["gameState_tic"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public moveRow moveRow {
                get {
                    return ((moveRow)(this.GetParentRow(this.Table.ParentRelations["move_tic"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["move_tic"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgameState_IdNull() {
                return this.IsNull(this.tabletic.gameState_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgameState_IdNull() {
                this[this.tabletic.gameState_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismove_IdNull() {
                return this.IsNull(this.tabletic.move_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmove_IdNull() {
                this[this.tabletic.move_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tacRow : global::System.Data.DataRow {
            
            private tacDataTable tabletac;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tacRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletac = ((tacDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int x {
                get {
                    return ((int)(this[this.tabletac.xColumn]));
                }
                set {
                    this[this.tabletac.xColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int y {
                get {
                    return ((int)(this[this.tabletac.yColumn]));
                }
                set {
                    this[this.tabletac.yColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int gameState_Id {
                get {
                    try {
                        return ((int)(this[this.tabletac.gameState_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gameState_Id\' in table \'tac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletac.gameState_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int move_Id {
                get {
                    try {
                        return ((int)(this[this.tabletac.move_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'move_Id\' in table \'tac\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletac.move_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public gameStateRow gameStateRow {
                get {
                    return ((gameStateRow)(this.GetParentRow(this.Table.ParentRelations["gameState_tac"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["gameState_tac"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public moveRow moveRow {
                get {
                    return ((moveRow)(this.GetParentRow(this.Table.ParentRelations["move_tac"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["move_tac"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgameState_IdNull() {
                return this.IsNull(this.tabletac.gameState_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgameState_IdNull() {
                this[this.tabletac.gameState_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismove_IdNull() {
                return this.IsNull(this.tabletac.move_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmove_IdNull() {
                this[this.tabletac.move_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class moveRow : global::System.Data.DataRow {
            
            private moveDataTable tablemove;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal moveRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablemove = ((moveDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int move_Id {
                get {
                    return ((int)(this[this.tablemove.move_IdColumn]));
                }
                set {
                    this[this.tablemove.move_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int message_Id {
                get {
                    try {
                        return ((int)(this[this.tablemove.message_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'message_Id\' in table \'move\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemove.message_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public messageRow messageRow {
                get {
                    return ((messageRow)(this.GetParentRow(this.Table.ParentRelations["message_move"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["message_move"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismessage_IdNull() {
                return this.IsNull(this.tablemove.message_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmessage_IdNull() {
                this[this.tablemove.message_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ticRow[] GetticRows() {
                if ((this.Table.ChildRelations["move_tic"] == null)) {
                    return new ticRow[0];
                }
                else {
                    return ((ticRow[])(base.GetChildRows(this.Table.ChildRelations["move_tic"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tacRow[] GettacRows() {
                if ((this.Table.ChildRelations["move_tac"] == null)) {
                    return new tacRow[0];
                }
                else {
                    return ((tacRow[])(base.GetChildRows(this.Table.ChildRelations["move_tac"])));
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class messageRowChangeEvent : global::System.EventArgs {
            
            private messageRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public messageRowChangeEvent(messageRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public messageRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class playerLoginRowChangeEvent : global::System.EventArgs {
            
            private playerLoginRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public playerLoginRowChangeEvent(playerLoginRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public playerLoginRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class gameMasterLoginRowChangeEvent : global::System.EventArgs {
            
            private gameMasterLoginRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public gameMasterLoginRowChangeEvent(gameMasterLoginRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public gameMasterLoginRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class playerRowChangeEvent : global::System.EventArgs {
            
            private playerRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public playerRowChangeEvent(playerRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public playerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class responseRowChangeEvent : global::System.EventArgs {
            
            private responseRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public responseRowChangeEvent(responseRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public responseRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class errorRowChangeEvent : global::System.EventArgs {
            
            private errorRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public errorRowChangeEvent(errorRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public errorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class gameIdRowChangeEvent : global::System.EventArgs {
            
            private gameIdRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public gameIdRowChangeEvent(gameIdRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public gameIdRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class nextPlayerRowChangeEvent : global::System.EventArgs {
            
            private nextPlayerRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public nextPlayerRowChangeEvent(nextPlayerRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public nextPlayerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class gameOverRowChangeEvent : global::System.EventArgs {
            
            private gameOverRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public gameOverRowChangeEvent(gameOverRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public gameOverRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class gameStateRowChangeEvent : global::System.EventArgs {
            
            private gameStateRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public gameStateRowChangeEvent(gameStateRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public gameStateRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ticRowChangeEvent : global::System.EventArgs {
            
            private ticRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ticRowChangeEvent(ticRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ticRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tacRowChangeEvent : global::System.EventArgs {
            
            private tacRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tacRowChangeEvent(tacRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tacRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class moveRowChangeEvent : global::System.EventArgs {
            
            private moveRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public moveRowChangeEvent(moveRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public moveRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591